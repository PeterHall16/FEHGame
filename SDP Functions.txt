Each person on the team needs to write at least 20% of the code for the game

Title: Deep Space Dodge

Classes:
 - Game
 - Player
 - Obstacle

Game Functions:
 - void showMenuScreen()  ; Peter Hall
   - Responsible for loading and saving high scores
   - Draws the menu screen
   - Polls for touches and performs the right action
   - Updates high scores returned from doGame
 - void showStatistics(int lastRunScore)  ; Angus Harrop
   - Displays high scores from the user and the last game score
 - int doGame()           ; Robert Pafford
    Phases:
     - Game Loop
     - Player Death Animation
     - Present Score - Optional with time

Game Variables:
 - int numHighScores;
    - Number of high scores in highScore
 - int highScore[5]
    - The high scores for the game

Player Functions:
 - Create()                         ; Peter Hall
   - Creates a new instance of the player
 - void jump()                      ; Peter Hall
   - Increases the verticalVelocity variable for each jump
 - int getHorizontalDistance()      ; Angus Harrop
   - Returns the horizontalPosition variable from the player
 - void updatePosition()            ; Robert Pafford
   - Updates horizontal and vertical position
 - boolean draw()                   ; Peter Hall
   - Draws the player on the screen
   - If the player is no longer on the screen, return false, if it still is, return true
 - void setDead()                   ; Angus Harrop
   - Sets the dead boolean to true

Player Variable:
 - int horizontalPosition
 - int verticalPosition
 - int verticalVelocity
 - boolean isDead

Obstacle Functions:
 - Create(int playerHorizontalPosition);        ;  Robert Pafford
    - Responsible for creating the obstacle class, calculating the position of the obstacle relative to the player start
    - Randomly generates a vertical position and radius for the obsticle
 - boolean draw(int playerHorizontalPosition);   ;  Angus Harrop
    - Draws the obstacle of the specified position and radius
    - Draws at the location relative to the player horizontal position
    - If the obstacle is off of the screen return false, if it is on the screen, return true
 - boolean hasCollided(int playerHorizontalPosition int playerVerticalPosition);   ;  Robert Pafford
    - Checks if the player has collided with this obstacle. If it did, return true, if not, return false

Obstacle Variables:
 - int horizontalPosition
 - int verticalPosition
 - int radius



Game Instructions:
You are the pilot of a rocket ship in deep space that was unfortunate enough to get caught between two colliding planets. This collision spewed debris out in every direction, and you now need to navigate through it and escape the gravity of the now one planet.
You pilot the ship by tapping on the screen to give thrust, but to conserve fuel it only turns on the thrusters for a short period of time.
You gain points by traveling further away from the planet. Good Luck
Press anywhere to return.


Your job is to avoid the asteroid debris.
Tap anywhere to fire the rocket's thrusters for a short period of time.
Gain points by escaping the asteroids.